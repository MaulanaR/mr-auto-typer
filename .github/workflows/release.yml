name: Build & Release Wails

on:
  push:
    tags:
      - 'v1.0.0'

env:
  APP_NAME: Mr Auto Typer

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Linux deps untuk Wails (GTK/WebKit)
      - name: Install Linux build deps
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            build-essential \
            pkg-config

      - name: Cache Go build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache Node (frontend)
        if: hashFiles('**/package-lock.json') != ''
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            **/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      # Jika struktur proyek punya folder frontend/
      - name: Install frontend deps (if present)
        if: hashFiles('frontend/package.json') != ''
        working-directory: frontend
        run: npm ci

      # Build native per-OS. Versi tag diinject ke ldflags (opsional).
      - name: Build Wails
        run: |
          echo "Building for ${{ runner.os }}"
          wails build -clean -ldflags "-X main.version=${GITHUB_REF_NAME}"

      # Kemas artifact per-OS agar rapi
      - name: Package artifact (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p dist
          TAG="${GITHUB_REF_NAME}"
          BIN_DIR="build/bin"
          OS="$(echo ${{ runner.os }} | tr '[:upper:]' '[:lower:]')"
          # Ambil file biner utama di build/bin (biasanya sesuai APP_NAME)
          if [ -f "${BIN_DIR}/${APP_NAME}" ]; then
            # Linux biner biasanya tanpa ekstensi, macOS bisa .app / .dmg
            if [ -d "build/${APP_NAME}.app" ]; then
              zip -r "dist/${APP_NAME}_${TAG}_${OS}.zip" "build/${APP_NAME}.app"
            else
              tar -czf "dist/${APP_NAME}_${TAG}_${OS}_amd64.tar.gz" -C "${BIN_DIR}" "${APP_NAME}"
            fi
          else
            # fallback: kemas semua isi bin
            tar -czf "dist/${APP_NAME}_${TAG}_${OS}_bundle.tar.gz" -C "${BIN_DIR}" .
          fi
          ls -lah dist

      - name: Package artifact (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          $TAG = "${env:GITHUB_REF_NAME}"
          $BIN_DIR = "build/bin"
          # coba file exe sesuai APP_NAME
          $exePath = Join-Path $BIN_DIR ("${env:APP_NAME}.exe")
          if (Test-Path $exePath) {
            Compress-Archive -Path $exePath -DestinationPath ("dist/${env:APP_NAME}_${TAG}_windows_amd64.zip")
          } else {
            Compress-Archive -Path "$BIN_DIR/*" -DestinationPath ("dist/${env:APP_NAME}_${TAG}_windows_bundle.zip")
          }
          Get-ChildItem dist

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifacts
          path: dist/*

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_dist

      - name: List files
        run: ls -R release_dist

      - name: Create/Update Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release_dist/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
