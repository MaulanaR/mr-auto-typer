name: Build & Release Wails

on:
  push:
    tags:
      - 'v*'

env:
  APP_NAME: mr-auto-typer

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            ext: ''
            arch: amd64
          - os: windows-latest
            platform: windows
            ext: .exe
            arch: amd64
          - os: macos-13  # Use macOS 13 for compatibility
            platform: darwin
            ext: ''
            arch: amd64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Linux deps untuk Wails (GTK/WebKit)
      - name: Install Linux build deps
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            build-essential \
            pkg-config \
            libupower-glib-dev \
            libnss3-dev \
            libdbus-1-dev \
            libxrandr-dev \
            libxss-dev \
            libasound2-dev \
            libxtst-dev \
            libgl1-mesa-dev \
            libxinerama-dev \
            libxcursor-dev \
            libxi-dev

      # macOS deps
      - name: Install macOS build deps
        if: matrix.platform == 'darwin'
        run: |
          brew install npm create-dmg

      - name: Cache Go build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      # Build frontend jika ada package.json
      - name: Build frontend
        if: hashFiles('frontend/package.json') != ''
        working-directory: frontend
        run: |
          npm ci
          npm run build 2>/dev/null || echo "No build script found, skipping frontend build"

      # Build Wails application
      - name: Build Wails
        run: |
          echo "Building for ${{ matrix.platform }}"
          wails build -clean -platform ${{ matrix.platform }} -ldflags "-X main.version=${GITHUB_REF#v}"

      # Package artifacts untuk Linux
      - name: Package Linux artifact
        if: matrix.platform == 'linux'
        run: |
          mkdir -p dist
          TAG="${GITHUB_REF#v}"
          BIN_NAME="${APP_NAME}${{ matrix.ext }}"
          
          if [ -f "build/bin/${BIN_NAME}" ]; then
            cp "build/bin/${BIN_NAME}" "dist/"
            tar -czf "dist/${APP_NAME}-${TAG}-linux-${{ matrix.arch }}.tar.gz" -C "dist" "${BIN_NAME}"
            rm "dist/${BIN_NAME}"
          elif [ -d "build/${APP_NAME}.app" ]; then
            tar -czf "dist/${APP_NAME}-${TAG}-darwin-${{ matrix.arch }}.tar.gz" -C "build" "${APP_NAME}.app"
          else
            echo "Binary not found, listing build directory:"
            find build -type f -name "*" || true
            exit 1
          fi
          ls -lah dist/

      # Package artifacts untuk Windows
      - name: Package Windows artifact
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          $TAG = "${env:GITHUB_REF_NAME}" -replace "v", ""
          $BIN_NAME = "${env:APP_NAME}${{ matrix.ext }}"
          $exePath = "build/bin/${BIN_NAME}"
          
          if (Test-Path $exePath) {
            Compress-Archive -Path $exePath -DestinationPath "dist/${env:APP_NAME}-${TAG}-windows-${{ matrix.arch }}.zip"
          } else {
            Write-Host "Binary not found at $exePath"
            Get-ChildItem -Path build/bin -Recurse -Force | Out-String
            exit 1
          }
          Get-ChildItem dist

      # Package artifacts untuk macOS
      - name: Package macOS artifact
        if: matrix.platform == 'darwin'
        run: |
          mkdir -p dist
          TAG="${GITHUB_REF#v}"
          
          if [ -d "build/${APP_NAME}.app" ]; then
            # Create DMG for macOS
            brew install create-dmg || true
            if command -v create-dmg &> /dev/null; then
              create-dmg "build/${APP_NAME}.app" "dist/${APP_NAME}-${TAG}-darwin-${{ matrix.arch }}.dmg" || \
                tar -czf "dist/${APP_NAME}-${TAG}-darwin-${{ matrix.arch }}.tar.gz" -C "build" "${APP_NAME}.app"
            else
              tar -czf "dist/${APP_NAME}-${TAG}-darwin-${{ matrix.arch }}.tar.gz" -C "build" "${APP_NAME}.app"
            fi
          else
            echo "macOS app bundle not found"
            find build -type f -name "*" || true
            exit 1
          fi
          ls -lah dist/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-artifacts
          path: dist/*
          retention-days: 30

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_dist
          merge-multiple: true

      - name: List files
        run: |
          echo "Release files:"
          find release_dist -type f -name "*" | sort

      - name: Create Release Notes
        id: release_notes
        run: |
          TAG="${GITHUB_REF_NAME}"
          echo "## ðŸš€ Release ${TAG}" > release_notes.md
          echo "" >> release_notes.md
          echo "### ðŸ“¦ Downloads" >> release_notes.md
          echo "" >> release_notes.md
          
          # Add download links for each platform
          for file in release_dist/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              if [[ $filename == *"linux"* ]]; then
                echo "- **Linux**: \`${filename}\`" >> release_notes.md
              elif [[ $filename == *"windows"* ]]; then
                echo "- **Windows**: \`${filename}\`" >> release_notes.md
              elif [[ $filename == *"darwin"* ]]; then
                echo "- **macOS**: \`${filename}\`" >> release_notes.md
              fi
            fi
          done
          
          echo "" >> release_notes.md
          echo "### ðŸ”§ Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "- **Windows**: Extract the ZIP file and run `.exe`" >> release_notes.md
          echo "- **Linux**: Extract the TAR.GZ file and run the binary" >> release_notes.md
          echo "- **macOS**: Open the DMG file and drag to Applications, or extract TAR.GZ" >> release_notes.md
          
          cat release_notes.md
          
          # Set output for GitHub Release
          {
            echo 'notes<<EOF'
            cat release_notes.md
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Create/Update Release
        uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.release_notes.outputs.notes }}
          files: |
            release_dist/*
          draft: false
          prerelease: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
