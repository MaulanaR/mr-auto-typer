name: Development Build

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  APP_NAME: mr-auto-typer

jobs:
  build-dev:
    name: Build Dev (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            ext: ''
            arch: amd64
          - os: windows-latest
            platform: windows
            ext: .exe
            arch: amd64
          - os: macos-latest
            platform: darwin
            ext: ''
            arch: amd64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Linux build deps
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            build-essential \
            pkg-config \
            libupower-glib-dev \
            libnss3-dev \
            libdbus-1-dev \
            libxrandr-dev \
            libxss-dev \
            libasound2-dev \
            libxtst-dev \
            libgconf-2-4

      - name: Install macOS build deps
        if: matrix.platform == 'darwin'
        run: |
          brew install npm

      - name: Cache Go build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Build frontend
        if: hashFiles('frontend/package.json') != ''
        working-directory: frontend
        run: |
          npm ci
          npm run build 2>/dev/null || echo "No build script found, skipping frontend build"

      - name: Build Wails
        run: |
          echo "Building for ${{ matrix.platform }}"
          wails build -clean -platform ${{ matrix.platform }} -ldflags "-X main.version=dev-${GITHUB_SHA::7}"

      - name: Package Linux artifact
        if: matrix.platform == 'linux'
        run: |
          mkdir -p dist
          COMMIT="${GITHUB_SHA::7}"
          BIN_NAME="${APP_NAME}${{ matrix.ext }}"
          
          if [ -f "build/bin/${BIN_NAME}" ]; then
            cp "build/bin/${BIN_NAME}" "dist/"
            tar -czf "dist/${APP_NAME}-dev-${COMMIT}-linux-${{ matrix.arch }}.tar.gz" -C "dist" "${BIN_NAME}"
            rm "dist/${BIN_NAME}"
          elif [ -d "build/${APP_NAME}.app" ]; then
            tar -czf "dist/${APP_NAME}-dev-${COMMIT}-darwin-${{ matrix.arch }}.tar.gz" -C "build" "${APP_NAME}.app"
          else
            echo "Binary not found"
            find build -type f -name "*" || true
            exit 1
          fi
          ls -lah dist/

      - name: Package Windows artifact
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          $COMMIT = "${env:GITHUB_SHA}".Substring(0, 7)
          $BIN_NAME = "${env:APP_NAME}${{ matrix.ext }}"
          $exePath = "build/bin/${BIN_NAME}"
          
          if (Test-Path $exePath) {
            Compress-Archive -Path $exePath -DestinationPath "dist/${env:APP_NAME}-dev-${COMMIT}-windows-${{ matrix.arch }}.zip"
          } else {
            Write-Host "Binary not found at $exePath"
            Get-ChildItem -Path build/bin -Recurse -Force | Out-String
            exit 1
          }
          Get-ChildItem dist

      - name: Package macOS artifact
        if: matrix.platform == 'darwin'
        run: |
          mkdir -p dist
          COMMIT="${GITHUB_SHA::7}"
          
          if [ -d "build/${APP_NAME}.app" ]; then
            tar -czf "dist/${APP_NAME}-dev-${COMMIT}-darwin-${{ matrix.arch }}.tar.gz" -C "build" "${APP_NAME}.app"
          else
            echo "macOS app bundle not found"
            find build -type f -name "*" || true
            exit 1
          fi
          ls -lah dist/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dev-${{ matrix.platform }}-${{ matrix.arch }}
          path: dist/*
          retention-days: 7

  create-release-info:
    name: Create Release Info
    runs-on: ubuntu-latest
    needs: build-dev
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_dist
          merge-multiple: true

      - name: Create Release Info
        run: |
          echo "# 🚀 Development Build" > release_info.md
          echo "" >> release_info.md
          echo "Commit: \`${GITHUB_SHA}\`" >> release_info.md
          echo "Branch: \`${GITHUB_REF_NAME}\`" >> release_info.md
          echo "" >> release_info.md
          echo "## 📦 Development Downloads" >> release_info.md
          echo "" >> release_info.md
          
          for file in release_dist/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              size=$(du -h "$file" | cut -f1)
              echo "- \`${filename}\` (${size})" >> release_info.md
            fi
          done
          
          echo "" >> release_info.md
          echo "⚠️ **Note**: These are development builds and may contain bugs." >> release_info.md
          echo "" >> release_info.md
          echo "### 🔧 Installation" >> release_info.md
          echo "" >> release_info.md
          echo "- **Windows**: Extract ZIP and run `.exe`" >> release_info.md
          echo "- **Linux**: Extract TAR.GZ and run binary" >> release_info.md
          echo "- **macOS**: Extract TAR.GZ and run `.app`" >> release_info.md
          
          cat release_info.md

      - name: Update Release Info File
        run: |
          mkdir -p dist
          cp release_info.md dist/DEV_RELEASE_INFO.md

      - name: Upload Release Info
        uses: actions/upload-artifact@v4
        with:
          name: release-info
          path: dist/DEV_RELEASE_INFO.md
          retention-days: 7